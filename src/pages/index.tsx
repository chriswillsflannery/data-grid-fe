import styles from '@/styles/Home.module.css';
import { useQuery } from '@apollo/client';
import Head from 'next/head';
import { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';
import { GetSubmissionsDocument, GetSubmissionsQuery } from '@/gql-output/graphql';

type Submission = GetSubmissionsQuery['submissions'][number];

export default function Home() {
  const {data, error} = useQuery(GetSubmissionsDocument);

  // todo repace type with graphql generated type
  const submissions: Submission[]  = data?.submissions || [];

  const customCols = [...new Set(submissions.flatMap((s) => Object.keys(s.data)))]
  const customColDefs: GridColDef[] = [
    { field: "id", headerName: "ID", width: 200 },
    { field: "submittedAt", headerName: "Submitted", width: 200 },
    ...customCols.map(field => ({
      field: field,
      headerName: field,
      width: 200,
      valueGetter: (params: GridValueGetterParams) => params.row.data[field]
    }))
  ];

  if (error) return <div>Error! {error.message}</div>;

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {JSON.stringify(data)}
        <DataGrid rows={submissions} columns={customColDefs} />
      </main>
    </>
  )
}
